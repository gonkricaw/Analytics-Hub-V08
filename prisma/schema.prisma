generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model idbi_users {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  username                 String?                 @unique
  password_hash            String
  first_name               String
  last_name                String
  role_id                  String
  is_active                Boolean                 @default(true)
  is_email_verified        Boolean                 @default(false)
  email_verification_token String?
  password_reset_token     String?
  password_reset_expires   DateTime?
  last_login               DateTime?
  login_attempts           Int                     @default(0)
  locked_until             DateTime?
  must_change_password     Boolean                 @default(true)
  terms_accepted           Boolean                 @default(false)
  terms_accepted_at        DateTime?
  terms_accepted_ip        String?
  terms_accepted_user_agent String?
  current_terms_version    String?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  created_by               String?
  updated_by               String?
  audit_logs               idbi_audit_logs[]
  content_created          idbi_content[]          @relation("ContentCreator")
  content_updated          idbi_content[]          @relation("ContentUpdater")
  created_dashboards       idbi_dashboards[]
  uploaded_files           idbi_files[]
  password_resets          idbi_password_resets[]
  invitations_received     idbi_user_invitations[] @relation("InvitationReceiver")
  invitations_sent         idbi_user_invitations[] @relation("InvitationSender")
  sessions                 idbi_user_sessions[]
  created_menus            idbi_menus[]            @relation("MenuCreator")
  updated_menus            idbi_menus[]            @relation("MenuUpdater")
  created_notifications    idbi_notifications[]    @relation("NotificationCreator")
  received_notifications   idbi_notifications[]    @relation("NotificationReceiver")
  created_announcements    idbi_announcements[]    @relation("AnnouncementCreator")
  created_terms_versions   idbi_terms_versions[]   @relation("TermsCreator")
  updated_terms_versions   idbi_terms_versions[]   @relation("TermsUpdater")
  approved_terms_versions  idbi_terms_versions[]   @relation("TermsApprover")
  terms_acceptances        idbi_user_terms_acceptance[]
  current_terms            idbi_terms_versions?    @relation("UserCurrentTerms", fields: [current_terms_version], references: [id])
  role                     idbi_roles              @relation(fields: [role_id], references: [id])

  @@map("idbi_users")
}

model idbi_roles {
  id                  String                     @id @default(cuid())
  name                String                     @unique
  description         String?
  is_active           Boolean                    @default(true)
  created_at          DateTime                   @default(now())
  updated_at          DateTime                   @updatedAt
  content_permissions idbi_content_permissions[]
  role_permissions    idbi_role_permissions[]
  user_invitations    idbi_user_invitations[]
  users               idbi_users[]
  menu_roles          idbi_menu_roles[]

  @@map("idbi_roles")
}

model idbi_permissions {
  id               String                  @id @default(cuid())
  name             String                  @unique
  description      String?
  resource         String
  action           String
  created_at       DateTime                @default(now())
  updated_at       DateTime                @updatedAt
  role_permissions idbi_role_permissions[]

  @@map("idbi_permissions")
}

model idbi_role_permissions {
  id            String           @id @default(cuid())
  role_id       String
  permission_id String
  permission    idbi_permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          idbi_roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("idbi_role_permissions")
}

model idbi_user_sessions {
  id         String     @id @default(cuid())
  user_id    String
  token      String     @unique
  ip_address String?
  user_agent String?
  expires_at DateTime
  created_at DateTime   @default(now())
  user       idbi_users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("idbi_user_sessions")
}

model idbi_password_resets {
  id         String     @id @default(cuid())
  user_id    String
  token      String     @unique
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime   @default(now())
  user       idbi_users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("idbi_password_resets")
}

model idbi_user_invitations {
  id               String     @id @default(cuid())
  email            String
  role_id          String
  invited_by       String
  invitation_token String     @unique
  expires_at       DateTime
  accepted_at      DateTime?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  invited_user     idbi_users @relation("InvitationReceiver", fields: [email], references: [email])
  inviter          idbi_users @relation("InvitationSender", fields: [invited_by], references: [id])
  role             idbi_roles @relation(fields: [role_id], references: [id])

  @@map("idbi_user_invitations")
}

model idbi_content {
  id              String                     @id @default(cuid())
  title           String
  description     String?
  content_type    String
  content_data    Json?
  embed_url       String?
  is_active       Boolean                    @default(true)
  is_featured     Boolean                    @default(false)
  view_count      Int                        @default(0)
  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
  created_by      String
  updated_by      String?
  categories      idbi_content_categories[]
  permissions     idbi_content_permissions[]
  creator         idbi_users                 @relation("ContentCreator", fields: [created_by], references: [id])
  updater         idbi_users?                @relation("ContentUpdater", fields: [updated_by], references: [id])
  dashboard_items idbi_dashboard_items[]

  @@map("idbi_content")
}

model idbi_categories {
  id                 String                    @id @default(cuid())
  name               String                    @unique
  description        String?
  color              String?
  icon               String?
  is_active          Boolean                   @default(true)
  created_at         DateTime                  @default(now())
  updated_at         DateTime                  @updatedAt
  content_categories idbi_content_categories[]

  @@map("idbi_categories")
}

model idbi_content_categories {
  id          String         @id @default(cuid())
  content_id  String
  category_id String
  category    idbi_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  content     idbi_content    @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@unique([content_id, category_id])
  @@map("idbi_content_categories")
}

model idbi_content_permissions {
  id         String       @id @default(cuid())
  content_id String
  role_id    String
  can_view   Boolean      @default(true)
  can_edit   Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  content    idbi_content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  role       idbi_roles   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([content_id, role_id])
  @@map("idbi_content_permissions")
}

model idbi_dashboards {
  id              String                 @id @default(cuid())
  name            String
  description     String?
  layout_data     Json?
  is_default      Boolean                @default(false)
  is_active       Boolean                @default(true)
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  created_by      String
  dashboard_items idbi_dashboard_items[]
  creator         idbi_users             @relation(fields: [created_by], references: [id])

  @@map("idbi_dashboards")
}

model idbi_dashboard_items {
  id           String          @id @default(cuid())
  dashboard_id String
  content_id   String
  position_x   Int             @default(0)
  position_y   Int             @default(0)
  width        Int             @default(1)
  height       Int             @default(1)
  order_index  Int             @default(0)
  content      idbi_content    @relation(fields: [content_id], references: [id], onDelete: Cascade)
  dashboard    idbi_dashboards @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)

  @@unique([dashboard_id, content_id])
  @@map("idbi_dashboard_items")
}

model idbi_audit_logs {
  id          String      @id @default(cuid())
  user_id     String?
  action      String
  resource    String?
  resource_id String?
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime    @default(now())
  user        idbi_users? @relation(fields: [user_id], references: [id])

  @@map("idbi_audit_logs")
}

model idbi_ip_blacklist {
  id            String    @id @default(cuid())
  ip_address    String    @unique
  reason        String?
  blocked_at    DateTime  @default(now())
  blocked_until DateTime?
  is_permanent  Boolean   @default(false)
  created_by    String?

  @@map("idbi_ip_blacklist")
}

model idbi_email_templates {
  id         String   @id @default(cuid())
  name       String   @unique
  subject    String
  html_body  String
  text_body  String?
  variables  Json?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

  @@map("idbi_email_templates")
}

model idbi_settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("idbi_settings")
}

model idbi_files {
  id            String     @id @default(cuid())
  filename      String
  original_name String
  mime_type     String
  file_size     Int
  file_path     String
  category      String     @default("general")
  description   String?
  uploaded_by   String
  is_public     Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  uploader      idbi_users @relation(fields: [uploaded_by], references: [id])

  @@map("idbi_files")
}

model idbi_menus {
  id          String            @id @default(cuid())
  title       String
  slug        String            @unique
  icon        String?
  path        String?
  parent_id   String?
  order_index Int               @default(0)
  level       Int               @default(0)
  is_active   Boolean           @default(true)
  is_external Boolean           @default(false)
  target      String            @default("_self")
  description String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  created_by  String
  updated_by  String?
  parent      idbi_menus?       @relation("MenuHierarchy", fields: [parent_id], references: [id])
  children    idbi_menus[]      @relation("MenuHierarchy")
  creator     idbi_users        @relation("MenuCreator", fields: [created_by], references: [id])
  updater     idbi_users?       @relation("MenuUpdater", fields: [updated_by], references: [id])
  menu_roles  idbi_menu_roles[]

  @@map("idbi_menus")
}

model idbi_menu_roles {
  id         String     @id @default(cuid())
  menu_id    String
  role_id    String
  can_view   Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  menu       idbi_menus @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  role       idbi_roles @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([menu_id, role_id])
  @@map("idbi_menu_roles")
}

model idbi_notifications {
  id               String      @id @default(cuid())
  title            String
  message          String
  type             String      @default("info") // info, success, warning, error
  target_user_id   String?     // null for system-wide notifications
  is_read          Boolean     @default(false)
  is_active        Boolean     @default(true)
  priority         String      @default("normal") // low, normal, high, urgent
  action_url       String?
  action_text      String?
  metadata         Json?
  expires_at       DateTime?
  read_at          DateTime?
  deleted_at       DateTime?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  created_by       String
  target_user      idbi_users? @relation("NotificationReceiver", fields: [target_user_id], references: [id], onDelete: Cascade)
  created_by_user  idbi_users  @relation("NotificationCreator", fields: [created_by], references: [id])

  @@index([target_user_id, is_read])
  @@index([created_at])
  @@index([expires_at])
  @@map("idbi_notifications")
}

model idbi_announcements {
  id               String      @id @default(cuid())
  title            String
  content          String
  type             String      @default("info") // info, success, warning, error
  is_active        Boolean     @default(true)
  is_pinned        Boolean     @default(false)
  priority         String      @default("normal") // low, normal, high, urgent
  target_roles     String[]    @default([]) // empty array means all roles
  action_url       String?
  action_text      String?
  metadata         Json?
  starts_at        DateTime?   @default(now())
  expires_at       DateTime?
  deleted_at       DateTime?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  created_by       String
  created_by_user  idbi_users  @relation("AnnouncementCreator", fields: [created_by], references: [id])

  @@index([is_active, starts_at, expires_at])
  @@index([created_at])
  @@index([priority])
  @@map("idbi_announcements")
}

model idbi_terms_versions {
  id                    String                      @id @default(cuid())
  version               String                      @unique
  title                 String
  content               String
  is_active             Boolean                     @default(false)
  is_published          Boolean                     @default(false)
  effective_date        DateTime?
  created_at            DateTime                    @default(now())
  updated_at            DateTime                    @updatedAt
  created_by            String
  updated_by            String?
  change_summary        String?
  approval_status       String                      @default("draft") // draft, pending, approved, rejected
  approved_by           String?
  approved_at           DateTime?
  creator               idbi_users                  @relation("TermsCreator", fields: [created_by], references: [id])
  updater               idbi_users?                 @relation("TermsUpdater", fields: [updated_by], references: [id])
  approver              idbi_users?                 @relation("TermsApprover", fields: [approved_by], references: [id])
  user_acceptances      idbi_user_terms_acceptance[]
  users_with_current    idbi_users[]                @relation("UserCurrentTerms")

  @@map("idbi_terms_versions")
}

model idbi_user_terms_acceptance {
  id                String              @id @default(cuid())
  user_id           String
  terms_version_id  String
  accepted_at       DateTime            @default(now())
  ip_address        String?
  user_agent        String?
  acceptance_method String              @default("web") // web, api, mobile
  user              idbi_users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  terms_version     idbi_terms_versions @relation(fields: [terms_version_id], references: [id], onDelete: Cascade)

  @@unique([user_id, terms_version_id])
  @@map("idbi_user_terms_acceptance")
}
