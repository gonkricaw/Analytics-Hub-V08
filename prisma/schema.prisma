generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model idbi_users {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  username                 String?                 @unique
  password_hash            String
  first_name               String
  last_name                String
  role_id                  String
  is_active                Boolean                 @default(true)
  is_email_verified        Boolean                 @default(false)
  email_verification_token String?
  password_reset_token     String?
  password_reset_expires   DateTime?
  last_login               DateTime?
  login_attempts           Int                     @default(0)
  locked_until             DateTime?
  must_change_password     Boolean                 @default(true)
  terms_accepted           Boolean                 @default(false)
  terms_accepted_at        DateTime?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  created_by               String?
  updated_by               String?
  audit_logs               idbi_audit_logs[]
  content_created          idbi_content[]          @relation("ContentCreator")
  content_updated          idbi_content[]          @relation("ContentUpdater")
  created_dashboards       idbi_dashboards[]
  uploaded_files           idbi_files[]
  password_resets          idbi_password_resets[]
  invitations_received     idbi_user_invitations[] @relation("InvitationReceiver")
  invitations_sent         idbi_user_invitations[] @relation("InvitationSender")
  sessions                 idbi_user_sessions[]
  role                     idbi_roles              @relation(fields: [role_id], references: [id])

  @@map("idbi_users")
}

model idbi_roles {
  id                  String                     @id @default(cuid())
  name                String                     @unique
  description         String?
  is_active           Boolean                    @default(true)
  created_at          DateTime                   @default(now())
  updated_at          DateTime                   @updatedAt
  content_permissions idbi_content_permissions[]
  role_permissions    idbi_role_permissions[]
  user_invitations    idbi_user_invitations[]
  users               idbi_users[]

  @@map("idbi_roles")
}

model idbi_permissions {
  id               String                  @id @default(cuid())
  name             String                  @unique
  description      String?
  resource         String
  action           String
  created_at       DateTime                @default(now())
  updated_at       DateTime                @updatedAt
  role_permissions idbi_role_permissions[]

  @@map("idbi_permissions")
}

model idbi_role_permissions {
  id            String           @id @default(cuid())
  role_id       String
  permission_id String
  permission    idbi_permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          idbi_roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("idbi_role_permissions")
}

model idbi_user_sessions {
  id         String     @id @default(cuid())
  user_id    String
  token      String     @unique
  ip_address String?
  user_agent String?
  expires_at DateTime
  created_at DateTime   @default(now())
  user       idbi_users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("idbi_user_sessions")
}

model idbi_password_resets {
  id         String     @id @default(cuid())
  user_id    String
  email      String
  token      String     @unique
  token_hash String     @unique
  expires_at DateTime
  used_at    DateTime?
  ip_address String?
  user_agent String?
  created_at DateTime   @default(now())
  user       idbi_users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("idbi_password_resets")
}

model idbi_user_invitations {
  id               String     @id @default(cuid())
  email            String
  first_name       String
  last_name        String
  role_id          String
  invited_by       String
  invitation_token String     @unique
  expires_at       DateTime
  accepted_at      DateTime?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  invited_user     idbi_users @relation("InvitationReceiver", fields: [email], references: [email])
  inviter          idbi_users @relation("InvitationSender", fields: [invited_by], references: [id])
  role             idbi_roles @relation(fields: [role_id], references: [id])

  @@map("idbi_user_invitations")
}

model idbi_content {
  id              String                     @id @default(cuid())
  title           String
  description     String?
  content_type    String
  content_data    Json?
  embed_url       String?
  encrypted_url   String?
  is_active       Boolean                    @default(true)
  is_public       Boolean                    @default(false)
  view_count      Int                        @default(0)
  last_viewed     DateTime?
  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
  created_by      String
  updated_by      String?
  creator         idbi_users                 @relation("ContentCreator", fields: [created_by], references: [id])
  updater         idbi_users?                @relation("ContentUpdater", fields: [updated_by], references: [id])
  categories      idbi_content_categories[]
  permissions     idbi_content_permissions[]
  dashboard_items idbi_dashboard_items[]

  @@map("idbi_content")
}

model idbi_categories {
  id                 String                    @id @default(cuid())
  name               String                    @unique
  description        String?
  color              String?
  icon               String?
  is_active          Boolean                   @default(true)
  created_at         DateTime                  @default(now())
  updated_at         DateTime                  @updatedAt
  content_categories idbi_content_categories[]

  @@map("idbi_categories")
}

model idbi_content_categories {
  id          String          @id @default(cuid())
  content_id  String
  category_id String
  category    idbi_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  content     idbi_content    @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@unique([content_id, category_id])
  @@map("idbi_content_categories")
}

model idbi_content_permissions {
  id         String       @id @default(cuid())
  content_id String
  role_id    String
  can_view   Boolean      @default(true)
  can_edit   Boolean      @default(false)
  can_delete Boolean      @default(false)
  content    idbi_content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  role       idbi_roles   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([content_id, role_id])
  @@map("idbi_content_permissions")
}

model idbi_dashboards {
  id              String                 @id @default(cuid())
  name            String
  description     String?
  layout_data     Json?
  is_default      Boolean                @default(false)
  is_active       Boolean                @default(true)
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  created_by      String
  dashboard_items idbi_dashboard_items[]
  creator         idbi_users             @relation(fields: [created_by], references: [id])

  @@map("idbi_dashboards")
}

model idbi_dashboard_items {
  id           String          @id @default(cuid())
  dashboard_id String
  content_id   String
  position_x   Int             @default(0)
  position_y   Int             @default(0)
  width        Int             @default(1)
  height       Int             @default(1)
  order_index  Int             @default(0)
  content      idbi_content    @relation(fields: [content_id], references: [id], onDelete: Cascade)
  dashboard    idbi_dashboards @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)

  @@unique([dashboard_id, content_id])
  @@map("idbi_dashboard_items")
}

model idbi_audit_logs {
  id          String      @id @default(cuid())
  user_id     String?
  action      String
  resource    String?
  resource_id String?
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime    @default(now())
  user        idbi_users? @relation(fields: [user_id], references: [id])

  @@map("idbi_audit_logs")
}

model idbi_ip_blacklist {
  id            String    @id @default(cuid())
  ip_address    String    @unique
  reason        String?
  blocked_at    DateTime  @default(now())
  blocked_until DateTime?
  is_permanent  Boolean   @default(false)
  created_by    String?

  @@map("idbi_ip_blacklist")
}

model idbi_email_templates {
  id         String   @id @default(cuid())
  name       String   @unique
  subject    String
  html_body  String
  text_body  String?
  variables  Json?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

  @@map("idbi_email_templates")
}

model idbi_settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("idbi_settings")
}

model idbi_files {
  id            String     @id @default(cuid())
  filename      String
  original_name String
  mime_type     String
  file_size     Int
  file_path     String
  uploaded_by   String
  is_public     Boolean    @default(false)
  created_at    DateTime   @default(now())
  uploader      idbi_users @relation(fields: [uploaded_by], references: [id])

  @@map("idbi_files")
}
